{{interface
    anotherVar : string;
    arrayName : Array<Person>; //Object types other than Array(which gets converted to smart array)
                               //MUST be of a concrete type that the user defines. Observers are generated for
                               //that class and ALL classes that extend it.

                                //when nested properties are accessed : they also have observers generated for them.

        //an interesting idea might be to have a mode where true setX and getX fns are generated instead of
        //property getters and setters. this would change the code style but boost performance significantly
        //it might be possible to require a 'interface' defining sets and gets for template-used properties
}}

<div id="first">
    some text {{variable[i].property}} more text {{anotherVar}}
    <span id="otherElement">
        <bold super="{{someValue}}">Dont replace</bold>
        more text2 {{var}}
    </span>

    this is the pre block
    {{#if somevar == true && someValue > 2}}
        string! {{var | formatter0 | formatter1 }}
        {{#unless false}}
            other!
        {{/unless}}

        {{#foreach arrayName -> element:el index:i}}
            //optimization if only child is a block with no sub blocks(if or unless without else or elseif), turn the block into a filter and apply it
            more content
            {{&element.name}}
        {{/foreach}}

        {{#switch someVar}}
            {{::case 0}}
            {{::case 1}}
            {{::default}}
        {{/switch}}
    {{/if}}

    this is the post block
    {{#if true}}

        {{::elseif not true}}

    {{/if}}

</div>

<!--

first block in each template file must be {{interface}}, this is not compiled into template just used to type validations and variable declarations

literals found in variables are allowed as attributes but not as content. <div attr={{'name'}}> is fine. {{'name'}} alone is not.
literals in blocks are fine.


Blocks
    if/elseif/else
    forin -> key, value. maybe dont include this, will depend on how object key observation comes out.
    foreach -> element, i
    switch/case/default

    injected variables look like this: {{#foreach arrayName -> element:el index:i}}
    they are used like so: {{&i}}
    they are never hidden, and exist only in the block they are defined in and child blocks


No injection possible between templates

Block fn -> return true if block should render, if fn is undefined || null, always render
Block generator -> generates blocks given an array. blocks are generated if in dom and when array grows and destroyed when it shrinks. nothing happens if null || undefined
Block content variables -> user variables within this block, observed to re-evaluate rendering this block
Block variables -> variables that live on the block, not user code and not observed. ex. forloop index value
BlockScope variables -> variables that are injected into this block from parent block


Block needs to know: what variables it cares about, if any of these change, re run just the affected elements
attributes, and block fn. Do not slam it. Ideally we are setup to coalesce subsequent changes to minimize
the number of dom inserts, but this should be profiled.

Formatters
    only valid in variable blocks or (maybe in injections?)
    formatters (filters) are pre defined. when defined they can optionally specify variants. in a template
    it would be :
        {{someValue | inCurrency('dollars') | someOtherFormatterNoVariant }}
        this compiles to : ['1', 'someValue', 'inCurrency_dollars', 'someOtherFormatterNoVariant']
        the first array element denotes how many indices are part of the property chain.
        then comes the property chain
        then the formatters by name as 'formatterName_variantName'

        when formatters are compiled they specify their variants as strings. at build time we use the formatter
        name + _ + variantName to store these in a map that the templating system can use to look things up.

        NOTE when chaining formatters, the output of the first must match the output of the second and so on
        ie f0 -> string, string-> f1 is ok
           f0 -> SomeObjectType, number -> f1 is not ok

-->


{{interface

myVar : string;
myVar : Address(Src/Address)

}}

{{interface

myVar : string;
myVar : Address

}}
{{#if => ($myVar, $someArray)

}}

    {{#if myVar && yourVar && myVar > 10}}
        {{#if ::var && &var2 && &var3}}

optimize for rending speed

<panel _id="panel" material="myMaterial">
    {{&myStreetName => (p) p.getAddress(); }}

    {{&people, $constant => (people)
        ArrayFilter.orderBy(name)
        [people, 'someConstant']
    }}

    {{#foreach people | reverse | orderBy('name') >> person:p index:i, address:&p.address}}
        <panelItem displayinfo="{{&p.name}}" material="{{=> (&p, houseColors) houseColors.get(p.address)}}"/>
        <super-custom-element>

        </super-custom-element>
        {{#if => (p, &myStreetName) p.address.street.name === &myStreetName}}

        {{/if}}
    {{/foreach}}
</panel>

    foreach (arrayName | blockVariableOfTypeArray | array literal) | filter | filter >> variable declarations


{{#if => (myVar, someArray)
var x = myVar -> currency === || myOther && something != !== + - * / [0-9] .
x()
}}

    {{#if myVar && yourVar && myVar > 10}}

        optimize for rending speed >> convience
        user cannot define getters or setters for properties used in templates

        {{@alias = var * &index}}

        <panel _id="panel" material="myMaterial">
            {{&myStreetName => (p) p.getAddress(); }}

            {{&people, &constant => (people)
            ArrayFilter.orderBy(name)
            [people, 'someConstant']
            }}

            {{#foreach people | reverse | orderBy('name') >> person:p index:i, address:&p.address}}
                <panelItem displayinfo="{{&p.name}}" material="{{=> (&p, houseColors) houseColors.get(p.address)}}"/>
                <super-custom-element>

                </super-custom-element>
                {{#if => (p, &myStreetName) p.address.street.name === &myStreetName}}

                {{/if}}
            {{/foreach}}
        </panel>

        foreach (arrayName | blockVariableOfTypeArray | array literal) | filter | filter >> variable declarations